#!/bin/bash

# Parallel Pokemon Data Fetcher
# Fetches multiple Pokemon data in parallel using background processes

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# API base URL
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Output directory
OUTPUT_DIR="pokemon_data"

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Array to store background process IDs
PIDS=()

echo "Starting parallel fetch for ${#POKEMON_LIST[@]} Pokémon..."
echo

# Function to fetch a single Pokemon (runs in background)
fetch_pokemon() {
    local pokemon=$1
    local api_url="$API_BASE_URL/$pokemon"
    local output_file="$OUTPUT_DIR/${pokemon}.json"
    
    echo "Fetching data for $pokemon..."
    
    # Make API request with timeout
    if curl -s --max-time 10 "$api_url" -o "$output_file" 2>/dev/null; then
        # Verify the response is valid JSON
        if jq -e '.name' "$output_file" >/dev/null 2>&1; then
            echo "✅ Completed: $pokemon -> $output_file"
        else
            echo "❌ Invalid response for $pokemon"
            rm -f "$output_file"
        fi
    else
        echo "❌ Failed to fetch $pokemon"
    fi
}

# Start all Pokemon fetches in parallel
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon" &  # Run in background
    PIDS+=($!)  # Store the process ID
done

echo "All fetch processes started in parallel..."
echo "Waiting for all processes to complete..."
echo

# Wait for all background processes to complete
for pid in "${PIDS[@]}"; do
    wait "$pid"
done

echo
echo "All parallel processes completed!"

# Display summary
echo "Results summary:"
successful=0
total=${#POKEMON_LIST[@]}

for pokemon in "${POKEMON_LIST[@]}"; do
    if [ -f "$OUTPUT_DIR/${pokemon}.json" ]; then
        echo "  ✅ $pokemon"
        ((successful++))
    else
        echo "  ❌ $pokemon"
    fi
done

echo
echo "Successfully fetched: $successful/$total Pokémon"